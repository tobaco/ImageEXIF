<?php

class ImageEXIF extends WireData implements Module
{
    public static function getModuleInfo() {
        return array(
            'title' => __('EXIF Data'),
            'summary' => __('Expends the image object with EXIF data.'),
            'version' => '070',
            'author' => 'Nico Knoll, Horst',
            'autoload' => true
        );
    }

    public function init() {
        if(function_exists("exif_read_data")) {
            $this->addHookProperty('Pageimage::EXIF', $this, 'hookGetEXIF');
            $this->addHookProperty('Pageimage::exif', $this, 'hookGetEXIF');
        }
    }

    public function hookGetEXIF(HookEvent $event) {
        $image = $event->object;
        $event->return = new ImageEXIFAccessor($image->filename);
    }
    
    public function getEXIF($imagefile) {
        // so you don't have to use image objects. I think you have to use the full image path
        return new ImageEXIFAccessor($imagefile);
    }
}

    
class ImageEXIFAccessor {
    private $imagefile, $data, $exif;
    
    public function __construct($imagefile) {
        $this->imagefile = $imagefile;
        $this->data = $this->getExifDataFromImagefile($imagefile);
    }
    
    
    public function __get($string) {
        if(!$this->data) return '';
        
        // FIX by douglas81 (https://processwire.com/talk/topic/8348-imageexif/#entry108723)
        // make sure that what we're searching for is actually set, otherwise we get an error notice
	    if(!isset($this->data[$string]) && !isset($this->exif['EXIF'][$string]) &&  !isset($this->exif['IFD0'][$string])  && !isset($this->exif['FILE'][$string])) return '';
        
        if(in_array($string, array_keys($this->data))) return $this->data[$string];
        
        if(in_array($string, array_keys($this->exif['EXIF']))) return $this->exif['EXIF'][$string];
        if(in_array($string, array_keys($this->exif['IFD0']))) return $this->exif['IFD0'][$string];
        if(in_array($string, array_keys($this->exif['FILE']))) return $this->exif['FILE'][$string];
        
        return '';
    }


    private function getExifDataFromImagefile($imagefile) {
        // read exif data
        $exif = @exif_read_data($imagefile, NULL, true); 
        if($exif === false) return false; 
        
        $this->exif = $exif;
        
        // size & pathinfo
        list($width, $height, $type, $attr) = getimagesize($imagefile);
        $ext = pathinfo($imagefile, PATHINFO_EXTENSION);
        
        // default image attributes
        $data = array(
            'name'                        => basename($imagefile, ".".$ext),
            'filename'                    => basename($imagefile),
            'filesize'                    => filesize($imagefile),
            'height'                      => $height,
            'width'                       => $width
        );    
        
        // Sections: FILE, COMPUTED, IFD0, EXIF
        if(isset($exif['FILE'])) {
            foreach($exif['FILE'] as $exifKey => $exifValue) {
                switch($exifKey) {
                    case 'MimeType':
                        $data['mimeType']              = $exif["FILE"]['MimeType'];
                        $data['mime']                  = $exif["FILE"]['MimeType'];
                        break;   
                    case 'FileDateTime':
                        $data['date']                  = $exif["FILE"]['FileDateTime'];
                        $data['timestamp']             = $exif["FILE"]['FileDateTime'];
                        break;
                }
            }
        }
        
        if(isset($exif['IFD0'])) {
            foreach($exif['IFD0'] as $exifKey => $exifValue) {
                switch($exifKey) {
                    case 'Orientation':
                        $data['orientation']            = $exif["IFD0"]["Orientation"];
                        $data['orientationUnformatted'] = $exif["IFD0"]["Orientation"];
                        break;
                    case 'Make':
                        $data['cameraMake']             = $exif["IFD0"]["Make"];
                        break;
                    case 'Model':
                        $data['cameraModel']            = $exif["IFD0"]["Model"];
                        break;
                    case 'Artist':
                        $data['artist']                 = $exif["IFD0"]["Artist"];
                        $data['photographer']           = $exif["IFD0"]["Artist"];
                        break;
                    case 'Copyright':
                        $data['copyright']              = $exif["IFD0"]["Copyright"];
                        break;
                }
            }
        }
        
        
        if(isset($exif['EXIF'])) {
            foreach($exif['EXIF'] as $exifKey => $exifValue) {
                switch($exifKey) {
                    case 'FNumber':
                        list($num, $den) = explode("/",$exif["EXIF"]["FNumber"]);
                        
                        $data['aparture']               = ($num/$den);
                        $data['apartureUnformatted']    = $exif["EXIF"]["FNumber"];
                        $data['av']                     = $data['aparture'];
                        break;
                    case 'ExposureTime':
                        list($num, $den) = explode("/", $exif["EXIF"]["ExposureTime"]);
                        if ($num > $den) {
                            $exposure = "{$num}";
                        } else {
                            $den = round($den/$num);
                            $exposure = "1/{$den}";
                        }
                        
                        $data['exposure']               = ($num/$den);
                        $data['exposureTime']           = $data['exposure'];
                        $data['tv']                     = $data['exposure'];
                        $data['shutterTime']            = $data['exposure'];
                        $data['exposureUnformatted']    = $exif["EXIF"]["ExposureTime"];
                        break;
                    case 'FocalLength':
                        list($num, $den) = explode("/", $exif["EXIF"]["FocalLength"]);
                        $focallength  = ($num/$den);
                        
                        $data['focalLength']            = $focallength;
                        $data['focalLengthUnformatted'] = $exif["EXIF"]["FocalLength"];
                        break;
                    case 'FocalLength':
                        $timestamp = strtotime($exif["EXIF"]["DateTimeOriginal"]);
                        $dateoriginal = str_replace(":","-",substr($exif["EXIF"]["DateTimeOriginal"], 0, 10));
                        $timeoriginal = substr($exif["EXIF"]["DateTimeOriginal"], 10);
                        
                        $data['date']                   = $dateoriginal;
                        $data['time']                   = $timeoriginal;
                        $data['timestamp']              = $timestamp;
                        break;
                    case 'ISOSpeedRatings':
                        $data['iso']                    = $exif["EXIF"]["ISOSpeedRatings"];
                        $data['ISO']                    = $exif["EXIF"]["ISOSpeedRatings"]; 
                        break;
                    case 'WhiteBalance':
                        $data['whiteBalance']            = $this->helperWhitebalance($exif["EXIF"]["WhiteBalance"]);
                        $data['whiteBalanceUnformatted'] = $exif["EXIF"]["WhiteBalance"];
                        break;
                    case 'Flash':
                        $data['flash']                   = $this->helperFlash($exif["EXIF"]["Flash"]);
                        $data['flashUnformatted']        = $exif["EXIF"]["Flash"];
                        break;
                    case 'UserComment':
                        $data['comment']                 = $exif['EXIF']['UserComment'];
                        break;
                }
            }
        } 
        
        
        if(isset($exif['COMPUTED'])) {
            foreach($exif['COMPUTED'] as $exifKey => $exifValue) {
                switch($exifKey) {
                    case 'IsColor':
                        $data['color']                  = (((int)$exif["COMPUTED"]["IsColor"]) ? true : false);
                        break;
                }
            }
        } 
        
        // claean the data a little
        foreach($data as $key => $value) {
            if($value == NULL) $value = '';
            $data[$key] = trim($value);
        }
        
        // so we can use it as array
        $data['data'] = $data;
        
        // add raw data
        $data['raw'] = $data['exif'] = $exif;
        
        return $data;
    }
    
    
    public function toArray() {
        return $this->data['data'];
    }

    
    private function helperFlash($flashCode) {
        $exifFlashCodes = array(
             0 => 'Flash did not fire',
             1 => 'Flash fired',
             5 => 'Strobe return light not detected',
             7 => 'Strobe return light detected',
             9 => 'Flash fired, compulsory flash mode',
            13 => 'Flash fired, compulsory flash mode, return light not detected',
            15 => 'Flash fired, compulsory flash mode, return light detected',
            16 => 'Flash did not fire, compulsory flash mode',
            24 => 'Flash did not fire, auto mode',
            25 => 'Flash fired, auto mode',
            29 => 'Flash fired, auto mode, return light not detected',
            31 => 'Flash fired, auto mode, return light detected',
            32 => 'No flash function',
            65 => 'Flash fired, red-eye reduction mode',
            69 => 'Flash fired, red-eye reduction mode, return light not detected',
            71 => 'Flash fired, red-eye reduction mode, return light detected',
            73 => 'Flash fired, compulsory flash mode, red-eye reduction mode',
            77 => 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',
            79 => 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',
            89 => 'Flash fired, auto mode, red-eye reduction mode',
            93 => 'Flash fired, auto mode, return light not detected, red-eye reduction mode',
            95 => 'Flash fired, auto mode, return light detected, red-eye reduction mode'
            );
        if (isset($exifFlashCodes[$flashCode])) return $exifFlashCodes[$flashCode];
        return '';
    }
    
    
    private function helperWhitebalance($whiteBalanceCode) {
        $exifWhiteBalanceCodes = array(
             0 => 'Auto',
             1 => 'Daylight',
             2 => 'Fluorescent',
             3 => 'Incandescent',
             4 => 'Flash',
             9 => 'Fine Weather',
            10 => 'Cloudy',
            11 => 'Shade'
            );
        if (isset($exifWhiteBalanceCodes[$whiteBalanceCode])) return $exifWhiteBalanceCodes[$whiteBalanceCode];
        return '';
    }

}
